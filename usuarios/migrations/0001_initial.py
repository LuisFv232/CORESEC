# Generated by Django 4.2.10 on 2025-05-26 17:37

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('telefono', models.CharField(blank=True, max_length=15, null=True)),
                ('direccion', models.TextField(blank=True, null=True)),
                ('tipo_usuario', models.CharField(choices=[('administrador', 'Administrador CORESEC'), ('coordinador', 'Coordinador CORESEC'), ('municipal', 'Encargado Municipal')], default='municipal', max_length=20)),
                ('municipalidad', models.CharField(blank=True, choices=[('huamalies', 'Huamalíes'), ('huacaybamba', 'Huacaybamba'), ('leoncio_prado', 'Leoncio Prado'), ('yarowilca', 'Yarowilca'), ('pachitea', 'Pachitea'), ('maranon', 'Marañón'), ('ambo', 'Ambo'), ('lauricocha', 'Lauricocha'), ('huanuco', 'Huánuco'), ('puerto_inca', 'Puerto Inca'), ('dos_de_mayo', 'Dos de Mayo')], max_length=50, null=True)),
                ('cargo_coresec', models.CharField(blank=True, choices=[('director_ejecutivo', 'Director Ejecutivo'), ('coordinador_general', 'Coordinador General'), ('coordinador_tecnico', 'Coordinador Técnico'), ('analista_senior', 'Analista Senior'), ('analista_junior', 'Analista Junior'), ('especialista_monitoreo', 'Especialista en Monitoreo'), ('especialista_evaluacion', 'Especialista en Evaluación')], max_length=50, null=True)),
                ('cargo_municipal', models.CharField(blank=True, choices=[('alcalde', 'Alcalde'), ('gerente_municipal', 'Gerente Municipal'), ('subgerente_seguridad', 'Subgerente de Seguridad Ciudadana'), ('jefe_seguridad', 'Jefe de Seguridad Ciudadana'), ('coordinador_seguridad', 'Coordinador de Seguridad'), ('especialista_seguridad', 'Especialista en Seguridad'), ('analista_municipal', 'Analista Municipal'), ('secretario_tecnico', 'Secretario Técnico')], max_length=50, null=True)),
                ('fecha_registro', models.DateTimeField(auto_now_add=True)),
                ('activo', models.BooleanField(default=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Usuario',
                'verbose_name_plural': 'Usuarios',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
